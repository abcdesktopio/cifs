#!/bin/bash

set -u

# ====================================================================
# Example configuration:
# ====================================================================
# --------------------------------------------------------------------
# secret.yml:
# --------------------------------------------------------------------
# apiVersion: v1
# kind: Secret
# metadata:
#   name: cifs-secret
#   namespace: default
# type: abcdesktop/cifs
# data:
#   username: 'ZXhhbXBsZQo='
#   password: 'c2VjcmV0Cg=='
#
# --------------------------------------------------------------------
# pod.yml:
# --------------------------------------------------------------------
# apiVersion: v1
# kind: Pod
# metadata:
#   name: busybox
#   namespace: default
# spec:
#   containers:
#   - name: busybox
#     image: busybox
#     command:
#       - sleep
#       - "3600"
#     imagePullPolicy: IfNotPresent
#     volumeMounts:
#     - name: test
#       mountPath: /data
#   volumes:
#   - name: test
#     flexVolume:
#       driver: "abcdesktop/cifs"
#       fsType: "cifs"
#       secretRef:
#         name: "cifs-secret"
#       options:
#         networkPath: "//example-server/backup"
#         mountOptions: "dir_mode=0755,file_mode=0644,noperm"
# --------------------------------------------------------------------

# Uncomment the following lines to see how this plugin is called:
# echo >> /tmp/cifs.log
# date >> /tmp/cifs.log
# echo "$@" >> /tmp/cifs.log



# The log file content has changed
# Format is
# date +%F+%T STATUS STRING
# STATUS can be SUCCESS WARNING DEBUG ERROR
# Example
#  2022-12-12+11:34:31 ERROR: cifs driver read bad values
#  2022-12-12+11:35:15 DEBUG: cifs driver debug message
#  2022-12-12+11:35:57 SUCCESS: { "command": "mount -t cifs", "networkPath": "bar", "mountPoint":"foo", "options":"username=USER", "exit": "0", "result" : "0" }
#
DATEFORMAT=+%F+%T
ABCDESKTOPLOGPATH=/var/log/abcdesktop/cifs

init() {
 mkdir -p $ABCDESKTOPLOGPATH
 assertBinaryInstalled mount.cifs cifs-utils
 assertBinaryInstalled jq jq
 assertBinaryInstalled mountpoint util-linux
 assertBinaryInstalled base64 coreutils
 echo '{ "status": "Success", "message": "The abcdesktop/cifs flexvolume plugin was initialized successfully", "capabilities": { "attach": false } }'
 exit 0
}

assertBinaryInstalled() {
 binary="$1"
 package="$2"
 if ! which "$binary" > /dev/null ; then
  errorExit "Failed to initialize the abcdesktop/cifs flexvolume plugin. $binary command not found. Please install the $package package."
 fi
}

traceDebug() {
  echo $(date $DATEFORMAT) "$1" >> $ABCDESKTOPLOGPATH/trace.log
}

errorLog() {
 if [[ $# -ne 1 ]] ; then
  echo $(date $DATEFORMAT) errorExit:Unknown error in the abcdesktop/cifs flexvolume plugin. >> $ABCDESKTOPLOGPATH/error.log
  echo '{ "status": "Failure", "message": "Unknown error in the abcdesktop/cifs flexvolume plugin." }'
 else
  echo $(date $DATEFORMAT) errorExit:$1 >> $ABCDESKTOPLOGPATH/error.log
  jq -Mcn --arg message "$1" '{ "status": "Failure", "message": $message }' >> $ABCDESKTOPLOGPATH/error.log
 fi
}


errorExit() {
 if [[ $# -ne 1 ]] ; then
  echo $(date $DATEFORMAT) errorExit:Unknown error in the abcdesktop/cifs flexvolume plugin. >> $ABCDESKTOPLOGPATH/error.log
  echo '{ "status": "Failure", "message": "Unknown error in the abcdesktop/cifs flexvolume plugin." }'
 else
  echo $(date $DATEFORMAT) errorExit:$1 >> $ABCDESKTOPLOGPATH/error.log
  jq -Mcn --arg message "$1" '{ "status": "Failure", "message": $message }'
 fi
 exit 1
}

doMount() {
 cifsDomain=''  # set empty string by default for domain value
 mountDomain=''
 traceDebug "read"

 if [[ -z ${1:-} || -z ${2:-} ]] ; then
  errorExit "cifs mount: syntax error. usage: cifs mount <mount dir> <json options>"
 fi

 mountPoint="$1"
 shift
 json=$(printf '%s ' "${@}")
 if ! jq -e . > /dev/null 2>&1 <<< "$json" ; then
  errorExit "cifs mount: syntax error. invalid json: '$json'"
 fi
 networkPath="$(jq --raw-output -e '.networkPath' <<< "$json" 2>/dev/null)"
 if [[ $? -ne 0 ]] ; then
  errorExit "cifs mount: option networkPath missing in flexvolume configuration."
 fi
 mountOptions="$(jq --raw-output -e '.mountOptions' <<< "$json" 2>/dev/null)"
 if [[ $? -ne 0 ]] ; then
  errorExit "cifs mount: option mountOptions missing in flexvolume configuration."
 fi
 cifsUsernameBase64="$(jq --raw-output -e '.["kubernetes.io/secret/username"]' <<< "$json" 2>/dev/null)"
 if [[ $? -ne 0 ]] ; then
  errorExit "cifs mount: username not found. the flexVolume definition must contain a secretRef to a secret with username and password."
 fi
 cifsPasswordBase64="$(jq --raw-output -e '.["kubernetes.io/secret/password"]' <<< "$json" 2>/dev/null)"
 if [[ $? -ne 0 ]] ; then
  errorExit "cifs mount: password not found. the flexVolume definition must contain a secretRef to a secret with username and password."
 fi
 cifsDomainBase64="$(jq --raw-output -e '.["kubernetes.io/secret/domain"]' <<< "$json" 2>/dev/null)"
 # cifsDomainBase64 is an option, it can be undefined
 traceDebug "read done"
 traceDebug "base64"


 cifsUsername="$(base64 --decode <<< "$cifsUsernameBase64" 2>/dev/null)"
 if [[ $? -ne 0 ]] ; then
  errorExit "cifs mount: username secret is not base64 encoded."
 fi
 cifsPassword="$(base64 --decode <<< "$cifsPasswordBase64" 2>/dev/null)"
 if [[ $? -ne 0 ]] ; then
  errorExit "cifs mount: password secret is not base64 encoded."
 fi

 cifsDomain="$(base64 --decode <<< "$cifsDomainBase64" 2>/dev/null)"
 if [[ $? -eq 0 ]] ; then
   mountOptions=$mountOptions,domain=$cifsDomain
   echo  "$(date $DATEFORMAT) DEBUG: mountOptions=$mountOptions" >> $ABCDESKTOPLOGPATH/$cifsUsername.log
 fi


 traceDebug "base64 done"
 traceDebug "mountpoint"
 mkdir -p "$mountPoint" > /dev/null 2>&1
 if [[ $? -ne 0 ]] ; then
  errorExit "cifs mount: failed to create mount directory: '$mountPoint'"
 fi

 mountpoint "$mountPoint" 1>/dev/null 2>/dev/null
 if [[ $? -eq 0 ]] ; then
  echo "$(date) WARNING: cifs mount: there is already a filesystem mounted under the mount directory: $mountPoint" >> $ABCDESKTOPLOGPATH/$cifsUsername.log
  # errorExit "cifs mount: already a mount point $mountPoint"
  echo { \"status\": \"Success\", \"command\": "0" }
  exit 0
 fi

 # mount directory is not an empty directory
 if [[ ! -z $(ls -A "$mountPoint" 2>/dev/null) ]] ; then
  errorExit "cifs mount: mount directory is not an empty directory: '$mountPoint'"
 fi

 traceDebug "mountpoint done"
 traceDebug "mountcifs"
 export PASSWD="$cifsPassword"
 # traceDebug "mount -t cifs $networkPath $mountPoint -o username=$cifsUsername,$mountOptions pass=$PASSWD"
 traceDebug "mount -t cifs $networkPath $mountPoint -o username=$cifsUsername,$mountOptions pass=XXXXXXXXXXXX"
 echo "$(date) DEBUG: mount -t cifs $networkPath $mountPoint -o username=$cifsUsername,$mountOptions" >> $ABCDESKTOPLOGPATH/$cifsUsername.log
 result=$(mount -t cifs "$networkPath" "$mountPoint" -o "username=$cifsUsername,$mountOptions" 2>&1)
 code=$?
 traceDebug "mountcifs done"
 traceDebug "mount return $code $result" 

 # code is the exit code of previous command
 if [[ $code -ne 0 ]] ; then
  # remove the previous created directory
  rmdir "$mountPoint" 1>/dev/null 2>>$ABCDESKTOPLOGPATH/$cifsUsername.json
  echo  "$(date $DATEFORMAT) ERROR: cifs driver get input $json" >> $ABCDESKTOPLOGPATH/$cifsUsername.json
  echo  "$(date $DATEFORMAT) ERROR: { \"command\": \"mount -t cifs\", \"networkPath\": \"$networkPath\", \"mountPoint\":\"$mountPoint\", \"options\":\"-o username=$cifsUsername,$mountOptions\", \"exit\": \"$code\", \"result\" : \"$result\" }" >> $ABCDESKTOPLOGPATH/$cifsUsername.log
  #
  # by default return the error
  # to pass this error
  # this will return a fake ok
  # code=0
  # errorLog "cifs mount: failed to mount the network path: $result"
  #
  errorExit "cifs mount: failed to mount the network path: $result"
  # errorLog "cifs mount: failed to mount the network path: $result"
  # return fake ok
  code=0
else
  echo "$(date $DATEFORMAT) SUCCESS: { \"command\": \"mount -t cifs\", \"networkPath\": \"$networkPath\", \"mountPoint\":\"$mountPoint\", \"options\":\"username=$cifsUsername,$mountOptions\", \"exit\": \"$code\", \"result\" : \"$result\" }" >> $ABCDESKTOPLOGPATH/$cifsUsername.log
 fi 
 echo { \"status\": \"Success\", \"command\": "$code" }
 exit 0
}

doUnmount() {
 if [[ -z ${1:-} ]] ; then
  errorExit "cifs unmount: syntax error. usage: cifs unmount <mount dir>"
 fi
 mountPoint="$1"
 traceDebug "doUnmount $mountPoint"
 mountpoint "$mountPoint" 1>/dev/null 2>/dev/null
 if [[ $? -eq 0 ]] ; then
   traceDebug "$mountPoint is a mount point"
   result=$(umount "$mountPoint" 2>&1)
   if [[ $? -ne 0 ]] ; then
     traceDebug "cifs unmount: failed $mountPoint $result"
     # retry and sleep
     for i in {1..5}
     do
        # check again if it's a mountpoint
        mountpoint "$mountPoint" 1>/dev/null 2>/dev/null
        if [[ $? -eq 0 ]] ; then
                # yes it is a moint point again
                traceDebug "$mountPoint is a mount point again, but unmount has failed, retrying $i/5, sleeping for $i s"
                sleep $i
                result=$(umount "$mountPoint" 2>&1)
                if [[ $? -eq 0 ]] ; then
                  traceDebug "doUnmount $mountPoint success after $i s, return ok"
                  echo '{ "status": "Success" }'
                  exit 0
                fi
                traceDebug "cifs unmount: retry $i failed $mountPoint $result"
        else
                # no it is not a mount point
                traceDebug "$mountPoint is not a mount point, retry $i, skipping and return ok"
                echo '{ "status": "Success" }'
                exit 0
        fi
     done
     errorExit "cifs unmount: failed $mountPoint $result"
   else
     traceDebug "unmount $mountPoint success $result return ok"
   fi
 else
   traceDebug "$mountPoint is not a mount point, skipping and return ok"
 fi
 echo '{ "status": "Success" }'
 exit 0
}

not_supported() {
 echo '{ "status": "Not supported" }'
 exit 1
}

command=${1:-}
if [[ -n $command ]]; then
 shift
fi

case "$command" in
 init)
  init "$@"
  ;;
 mount)
  doMount "$@"
  ;;
 unmount)
  doUnmount "$@"
  ;;
 *)
  not_supported "$@"
  ;;
esac
